# Generated by Django 5.0.3 on 2024-03-12 01:15

# Standard library imports
import json

# Third-party imports
import geopandas as gpd
from django.db import migrations
from django.conf import settings
from django.contrib.gis.geos import GEOSGeometry
from shapely.geometry import MultiPolygon, Polygon, shape

# Application imports
from common.storage import IDataStoreFactory
from foodware.models import Locale


def callback(apps, schema_editor):
    """Loads options for geographic boundaries into the database."""

    # Initialize data store
    storage = IDataStoreFactory.get()

    # Read locales from file into GeoDataFrame
    try:
        with storage.open_file(settings.LOCALES_GEOPARQUET_FPATH, "rb") as f:
            locales_gdf = gpd.read_parquet(f)
    except FileNotFoundError:
        raise RuntimeError(
            f"POI fetch failed. Could not resolve the file path "
            f'"{settings.LOCALES_GEOPARQUET_FPATH}" to find the '
            "file in the configured data directory."
        ) from None

    # Ensure that all geometries in GeoDataFrame are multipolygons
    try:
        to_multi_polygon = lambda polygon: (
            MultiPolygon([polygon]) if isinstance(polygon, Polygon) else polygon
        )
        locales_gdf["geometry"] = locales_gdf["geometry"].apply(to_multi_polygon)
    except (KeyError, IndexError, AttributeError):
        raise RuntimeError(
            "POI fetch failed. The input boundary is not valid GeoJSON."
        ) from None

    # Fetch Django model from app registry
    django_model = apps.get_model("foodware", "Locale")

    # Load locales into database table represented by model
    for _, row in locales_gdf.iterrows():
        django_model.objects.create(
            name=row["name"], geometry=GEOSGeometry(row["geometry"].wkt)
        )


class Migration(migrations.Migration):

    dependencies = [
        ("foodware", "0003_install_trigram_ext"),
    ]

    operations = [
        migrations.RunPython(callback),
    ]
